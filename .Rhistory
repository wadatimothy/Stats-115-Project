knitr::opts_chunk$set(echo = TRUE)
library(bayesrules)
library(dplyr)
library(tidyverse)
library(rstanarm)
library(bayesplot)
library(broom.mixed)
library(tidybayes)
vgames_df <- read.csv("./video_games.csv")
# reading the data in as a dataframe but then reassign data frame with the
# variables = review_score, console, length, genres, sales where response
# is review score
vgames_df <- vgames_df %>%
rename(review_score = Metrics.Review.Score, console = Release.Console,
length = Length.All.PlayStyles.Average, genres = Metadata.Genres,
sales = Metrics.Sales, rating=Release.Rating)
vgames_df <- vgames_df %>%
select(review_score, console, length, genres, sales, rating)
head(vgames_df)
# Changes genres into a single genre
for (row in 1:nrow(vgames_df)) {
genres <- strsplit(vgames_df$genres[row], split = ",", fixed = TRUE)[[1]]
if(length(genres) > 0) {
i <- sample(length(genres), 1)
vgames_df$genres[row] <- genres[i]
}
}
head(vgames_df)
colSums(is.na(vgames_df))
ggplot(vgames_df, aes(x = length, y = review_score)) +
geom_point(size = 0.5) + xlim(0,100)
ggplot(vgames_df, aes(x = sales, y = review_score)) +
geom_point(size = 0.5)
ggplot(vgames_df, aes(x=review_score)) + geom_histogram()
ggplot(vgames_df, aes(x=review_score)) + geom_histogram() + facet_wrap(genres ~ ., scales = "free")
ggplot(vgames_df, aes(x=review_score)) + geom_histogram() + facet_wrap(console ~ ., scales = "free")
ggplot(vgames_df, aes(x=review_score)) + geom_histogram() + facet_wrap(rating ~ ., scales = "free")
# Using a Normal Regression
# Priors:
#   Normal(70,10) for Beta_0c
#   Vague priors for the other betas
#   Vague prior for sigma
# Model 1: X = genres
vgame_model_1 <- stan_glm(
review_score ~ genres,
data = vgames_df, family = gaussian,
prior_intercept = normal(70, 10),
prior = normal(0, 2.5, autoscale = TRUE),
prior_aux = exponential(1, autoscale = TRUE),
chains=4, iter=5000*2, seed=84735)
mcmc_trace(vgame_model_1)
mcmc_dens_overlay(vgame_model_1)
mcmc_acf(vgame_model_1)
tidy(vgame_model_1, effects = c("fixed", "aux"),
conf.int = TRUE, conf.level = 0.95)
as.data.frame(vgame_model_1) %>%
mutate(Action = `(Intercept)`,
Adventure = `(Intercept)` + genresAdventure,
Educational = `(Intercept)` + genresEducational,
Racing = `(Intercept)` + `genresRacing / Driving`,
RPG = `(Intercept)` + `genresRole-Playing (RPG)`,
Simulation = `(Intercept)` + genresSimulation,
Sports = `(Intercept)` + genresSports,
Strategy = `(Intercept)` + genresStrategy) %>%
mcmc_areas(pars = c("Action", "Adventure", "Educational", "Racing", "RPG",
"Simulation", "Sports", "Strategy"))
# Model 2: X = sales
vgame_model_2 <- stan_glm(
review_score ~ sales,
data = vgames_df, family = gaussian,
prior_intercept = normal(70, 10),
prior = normal(0, 2.5, autoscale = TRUE),
prior_aux = exponential(1, autoscale = TRUE),
chains=4, iter=5000*2, seed=84735)
mcmc_trace(vgame_model_2)
mcmc_dens_overlay(vgame_model_2)
mcmc_acf(vgame_model_2)
tidy(vgame_model_2, effects = c("fixed", "aux"),
conf.int = TRUE, conf.level = 0.95)
vgames_df %>%
add_fitted_draws(vgame_model_2, n = 100) %>%
ggplot(aes(x=sales, y=review_score)) +
geom_point(size=0.5) +
geom_line(aes(y=.value, group=.draw))
# Model 3: X = length
vgame_model_3 <- stan_glm(
review_score ~ length,
data = vgames_df, family = gaussian,
prior_intercept = normal(70, 10),
prior = normal(0, 2.5, autoscale = TRUE),
prior_aux = exponential(1, autoscale = TRUE),
chains=4, iter=5000*2, seed=84735)
mcmc_trace(vgame_model_3)
mcmc_dens_overlay(vgame_model_3)
mcmc_acf(vgame_model_3)
tidy(vgame_model_3, effects = c("fixed", "aux"),
conf.int = TRUE, conf.level = 0.95)
vgames_df %>%
add_fitted_draws(vgame_model_3, n = 100) %>%
ggplot(aes(x=length, y=review_score)) +
geom_point(size=0.5) +
geom_line(aes(y=.value, group=.draw)) +
xlim(0,100)
# Model 4: X = console
vgame_model_4 <- stan_glm(
review_score ~ console,
data = vgames_df, family = gaussian,
prior_intercept = normal(70, 10),
prior = normal(0, 2.5, autoscale = TRUE),
prior_aux = exponential(1, autoscale = TRUE),
chains=4, iter=5000*2, seed=84735)
mcmc_trace(vgame_model_4)
mcmc_dens_overlay(vgame_model_4)
mcmc_acf(vgame_model_4)
tidy(vgame_model_4, effects = c("fixed", "aux"),
conf.int = TRUE, conf.level = 0.95)
as.data.frame(vgame_model_4) %>%
mutate(DS = `(Intercept)`,
Wii = `(Intercept)` + `consoleNintendo Wii`,
PS3 = `(Intercept)` + `consolePlayStation 3`,
PSP = `(Intercept)` + `consoleSony PSP`,
X360 = `(Intercept)` + consoleX360) %>%
mcmc_areas(pars = c("DS", "Wii", "PS3", "PSP", "X360"))
# Model 5: X = rating
vgame_model_5 <- stan_glm(
review_score ~ rating,
data = vgames_df, family = gaussian,
prior_intercept = normal(70, 10),
prior = normal(0, 2.5, autoscale = TRUE),
prior_aux = exponential(1, autoscale = TRUE),
chains=4, iter=5000*2, seed=84735)
mcmc_trace(vgame_model_5)
mcmc_dens_overlay(vgame_model_5)
mcmc_acf(vgame_model_5)
tidy(vgame_model_5, effects = c("fixed", "aux"),
conf.int = TRUE, conf.level = 0.95)
as.data.frame(vgame_model_5) %>%
mutate(ratingE = `(Intercept)`,
ratingM = `(Intercept)` + ratingM,
ratingT = `(Intercept)` + ratingT) %>%
mcmc_areas(pars = c("ratingE", "ratingM", "ratingT"))
# Model 6: X = sales + length
vgame_model_6 <- stan_glm(
review_score ~ sales + length,
data = vgames_df, family = gaussian,
prior_intercept = normal(70, 10),
prior = normal(0, 2.5, autoscale = TRUE),
prior_aux = exponential(1, autoscale = TRUE),
chains=4, iter=5000*2, seed=84735)
mcmc_trace(vgame_model_6)
mcmc_dens_overlay(vgame_model_6)
mcmc_acf(vgame_model_6)
tidy(vgame_model_6, effects = c("fixed", "aux"),
conf.int = TRUE, conf.level = 0.95)
# Model 7: X = genres + console
vgame_model_7 <- stan_glm(
review_score ~ genres + console,
data = vgames_df, family = gaussian,
prior_intercept = normal(70, 10),
prior = normal(0, 2.5, autoscale = TRUE),
prior_aux = exponential(1, autoscale = TRUE),
chains=4, iter=5000*2, seed=84735)
mcmc_trace(vgame_model_7)
mcmc_dens_overlay(vgame_model_7)
mcmc_acf(vgame_model_7)
tidy(vgame_model_7, effects = c("fixed", "aux"),
conf.int = TRUE, conf.level = 0.95)
# Model 8: X = genres + console + genres:console
vgame_model_8 <- stan_glm(
review_score ~ genres + console + genres:console,
data = vgames_df, family = gaussian,
prior_intercept = normal(70, 10),
prior = normal(0, 2.5, autoscale = TRUE),
prior_aux = exponential(1, autoscale = TRUE),
chains=4, iter=5000*2, seed=84735)
mcmc_trace(vgame_model_8)
mcmc_dens_overlay(vgame_model_8)
mcmc_acf(vgame_model_8)
tidy(vgame_model_8, effects = c("fixed", "aux"),
conf.int = TRUE, conf.level = 0.95)
ggplot(vgames_df, aes(y=review_score, x=console, color=genres)) +
geom_boxplot()
# Model 9: X = genres + sales
vgame_model_9 <- stan_glm(
review_score ~ genres + sales,
data = vgames_df, family = gaussian,
prior_intercept = normal(70, 10),
prior = normal(0, 2.5, autoscale = TRUE),
prior_aux = exponential(1, autoscale = TRUE),
chains=4, iter=5000*2, seed=84735)
mcmc_trace(vgame_model_9)
mcmc_dens_overlay(vgame_model_9)
mcmc_acf(vgame_model_9)
tidy(vgame_model_9, effects = c("fixed", "aux"),
conf.int = TRUE, conf.level = 0.95)
# Model 10: X = genres + sales + genres:sales
vgame_model_10 <- stan_glm(
review_score ~ genres + sales + genres:sales,
data = vgames_df, family = gaussian,
prior_intercept = normal(70, 10),
prior = normal(0, 2.5, autoscale = TRUE),
prior_aux = exponential(1, autoscale = TRUE),
chains=4, iter=5000*2, seed=84735)
mcmc_trace(vgame_model_10)
View(vgame_model_1)
mcmc_dens_overlay(vgame_model_10)
View(vgame_model_1)
mcmc_acf(vgame_model_10)
tidy(vgame_model_10, effects = c("fixed", "aux"),
conf.int = TRUE, conf.level = 0.95)
ggplot(vgames_df, aes(y=review_score, x=sales, color=genres)) +
geom_point(size=0.5) +
geom_smooth(method="lm", se=FALSE)
# Model 11: X = everything
vgame_model_11 <- stan_glm(
review_score ~ .,
data = vgames_df, family = gaussian,
prior_intercept = normal(70, 10),
prior = normal(0, 2.5, autoscale = TRUE),
prior_aux = exponential(1, autoscale = TRUE),
chains=4, iter=5000*2, seed=84735)
mcmc_trace(vgame_model_11)
mcmc_dens_overlay(vgame_model_11)
mcmc_acf(vgame_model_11)
tidy(vgame_model_11, effects = c("fixed", "aux"),
conf.int = TRUE, conf.level = 0.95)
View(vgame_model_11)
View(vgames_df)
knitr::opts_chunk$set(echo = TRUE)
library(bayesrules)
library(dplyr)
library(tidyverse)
library(rstanarm)
library(bayesplot)
library(broom.mixed)
library(tidybayes)
vgames_df <- read.csv("./video_games.csv")
View(vgames_df)
knitr::opts_chunk$set(echo = TRUE)
library(bayesrules)
library(dplyr)
library(tidyverse)
vgames_df <- read.csv("./video_games.csv")
# reading the data in as a dataframe but then reassign data frame with the
# variables = review_score, console, length, genres, multiplayer, multiplatform,
# online, sales where response is review score
vgames_df <- vgames_df %>%
rename(review_score = Metrics.Review.Score, console = Release.Console,
length = Length.All.PlayStyles.Average, genres = Metadata.Genres,
sales = Metrics.Sales, rating = Release.Rating)
vgames_df <- vgames_df %>%
select(review_score, console, length, genres, sales, rating)
head(vgames_df)
# Changes genres into a single genre
for (row in 1:nrow(vgames_df)) {
genres <- strsplit(vgames_df$genres[row], split = ",", fixed = TRUE)[[1]]
if(length(genres) > 0) {
i <- sample(length(genres), 1)
vgames_df$genres[row] <- genres[i]
}
}
head(vgames_df)
colSums(is.na(vgames_df))
ggplot(vgames_df, aes(x = review_score)) +
geom_histogram()
# Removing rows that do not feature a recorded review score or is na
metacritic_df <- read.csv("../prior_datasets/metacritic_game_reviews.csv")
metacritic_df <- drop_na(metacritic_df)
# removed rows in metascore that do not have a digit and converted column to
# integer
metacritic_df <- metacritic_df[metacritic_df$metascore != "tbd", ]
metacritic_df$metascore <- as.integer(metacritic_df$metascore)
# removed rows in user score that do not have a digit and converted column to
# integer
metacritic_df <- metacritic_df[metacritic_df$userscore != "tbd", ]
metacritic_df$userscore <- as.integer(metacritic_df$userscore)
# convert userscore to scale of 0 - 100 (note:user score 0 - 10 default)
metacritic_df$userscore <- round(metacritic_df$userscore * 10, 0)
ggplot(metacritic_df, aes(x = metascore)) +
geom_histogram()
summary(metacritic_df$metascore)
metacritic_df %>%
summarise(variance = var(metascore), standard_deviation =  sd(metascore))
# See platform specific average review ratings
metascore_platforms <- metacritic_df %>%
group_by(platform) %>%
summarise(average_platform_metascore = mean(metascore))
summary(metascore_platforms$average_platform_metascore)
ggplot(metascore_platforms, aes(x = average_platform_metascore)) +
geom_histogram(binwidth = 1)
ggplot(metacritic_df, aes(x = userscore)) +
geom_histogram(binwidth = 10)
summary(metacritic_df$userscore)
metacritic_df %>%
summarise(variance = var(userscore), standard_deviation =  sd(userscore))
metacritic_platforms_user <- metacritic_df %>%
group_by(platform) %>%
summarise(average_platform_userscore = mean(userscore))
summary(metacritic_platforms_user$average_platform_userscore)
ggplot(metacritic_platforms_user, aes(x = average_platform_userscore)) +
geom_histogram(binwidth = 1)
metacritic_platforms_user <- metacritic_df %>%
group_by(platform) %>%
summarise(min_platform_userscore = min(userscore),
average_platform_userscore = mean(userscore),
max_platform_userscore = max(userscore))
summary(metacritic_platforms_user$average_platform_userscore)
metacritic_platforms_user <- metacritic_df %>%
group_by(platform) %>%
summarise(min_platform_userscore = min(userscore),
average_platform_userscore = mean(userscore),
max_platform_userscore = max(userscore))
summary(metacritic_platforms_user)
userscore_platforms <- metacritic_df %>%
group_by(platform) %>%
summarise(min_platform_userscore = min(userscore),
average_platform_userscore = mean(userscore),
max_platform_userscore = max(userscore))
userscore_platforms.head()
head(userscore_platforms)
userscore_platforms <- metacritic_df %>%
group_by(platform) %>%
summarise(average_platform_userscore = mean(userscore))
head(userscore_platforms)
userscore_platforms <- metacritic_df %>%
group_by(platform) %>%
summarise(average_platform_userscore = mean(userscore))
summary(userscore_platforms)
ign_df <- read.csv("../prior_datasets/ign_game_reviews.csv")
ign_df <- read.csv("../prior_datasets/ign_game_reviews.csv")
ign_df <- read.csv("../prior_datasets/ign_game_reviews.csv")
ign_df <- read.csv("../prior_datasets/ign_game_reviews.csv")
ign_df <- read.csv("../prior_datasets/ign_game_reviews.csv")
ign_df <- read.csv("../prior_datasets/ign_game_reviews.xlsx")
ign_df <- drop_na(ign_df)
View(ign_df)
install.packages("readx1")
knitr::opts_chunk$set(echo = TRUE)
library(bayesrules)
library(dplyr)
library(tidyverse)
library(readxl)
vgames_df <- read.csv("./video_games.csv")
ign_df <- read_excel("../prior_datasets/ign_game_reviews.xlsx")
ign_df <- drop_na(ign_df)
View(ign_df)
# Changes genres into a single genre
for (row in 1:nrow(ign_df)) {
genres <- strsplit(ign_df$Genre[row], split = ",", fixed = TRUE)[[1]]
if(length(genres) > 0) {
i <- sample(length(genres), 1)
ign_df$genre[row] <- genres[i]
}
}
head(ign_df)
ign_df <- read_excel("../prior_datasets/ign_game_reviews.xlsx")
ign_df <- drop_na(ign_df)
# Changes genres into a single genre
for (row in 1:nrow(ign_df)) {
genres <- strsplit(ign_df$Genre[row], split = ",", fixed = TRUE)[[1]]
if(length(genres) > 0) {
i <- sample(length(genres), 1)
ign_df$Genre[row] <- genres[i]
}
}
head(ign_df)
min(ign_df$Score)
max(ign_df$Score)
# Scale to a score between 0 - 100
ign_df$Score = ign_df$Score * 10
ign_df <- read_excel("../prior_datasets/ign_game_reviews.xlsx")
ign_df <- drop_na(ign_df)
# Changes genres into a single genre
for (row in 1:nrow(ign_df)) {
genres <- strsplit(ign_df$Genre[row], split = ",", fixed = TRUE)[[1]]
if(length(genres) > 0) {
i <- sample(length(genres), 1)
ign_df$Genre[row] <- genres[i]
}
}
# Scale to a score between 0 - 100
ign_df$Score = ign_df$Score * 10
head(ign_df)
ign_df %>%
group_by(Genre) %>%
summarise(mean(Score)) %>%
summary()
?summary
ign_genres <- ign_df %>%
group_by(Genre) %>%
summarise(mean(Score))
ign_genres <- ign_df %>%
group_by(Genre) %>%
summarise(Score = mean(Score))
summary(ign_genres)
ign_genres %>%
summarise(var = var(Score), sd = sd(Score))
View(ign_df)
# Removing rows that do not feature a recorded review score or is na
metacritic_df <- read.csv("../prior_datasets/metacritic_game_reviews.csv")
metacritic_df <- drop_na(metacritic_df)
# removed rows in metascore that do not have a digit and converted column to
# integer
metacritic_df <- metacritic_df[metacritic_df$metascore != "tbd", ]
metacritic_df$metascore <- as.integer(metacritic_df$metascore)
# removed rows in user score that do not have a digit and converted column to
# integer
metacritic_df <- metacritic_df[metacritic_df$userscore != "tbd", ]
metacritic_df$userscore <- as.integer(metacritic_df$userscore)
# convert userscore to scale of 0 - 100 (note:user score 0 - 10 default)
metacritic_df$userscore <- round(metacritic_df$userscore * 10, 0)
